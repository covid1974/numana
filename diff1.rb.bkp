<NOTE>
@{
<M>
\newcommand{\v}{\vec}
</M>
<TITLE>Differential equations</TITLE>
<HEAD1>Differential equations</HEAD1>

Numerical analysis is all about solving equations (approximately)
using a
computer. Here the term "equation" is used in a very general
sense: You'll be given a set up, and some partial information
about it, and you have to find some other information based on
that. Here are some examples:
<UL><LI>Finding the area under a given curve.</LI>

<LI>Finding the roots of a given 10-degree polynomial.</LI>

<LI>Finding all solutions of a given linear system of
equations in 1000 variables.</LI>

<LI>Solving  a given differential equation.</LI>
</UL>
Depending on the given information, the above problems may be
quaite unmanageable or extremely difficult to be solved by hand. Then we have to use a computer, and that is what
 numerical analysis is all about.
 
<P/>

We shall start with a familiar physics example that will lead to
an unmanageable differential equation.

<HEAD2>An example: simple pendulum</HEAD2>

During our high school days we are taught that a simple pendulum executes an
approximately simple harmonic motion <I>if the angle of swing is small.</I> However, high
school textbooks avoid discussing the general case: the motion of a
pendulum that may swing to larger angles. The main reason is that this leads
to an unmanageable differential equation that cannot be solved without a computer.
<P/>
Consider the following diagram. 
<CIMG web="pendu.png">Simple pendulum</CIMG>
Taking <M>O</M> as the origin and positive
<M>x</M>- <M>y</M>- and <M>\theta</M>-directions as shown, the position of
the bob is
<MULTILINE>
x &  = &  L\sin(\theta)\\
y &  = &  -L\cos(\theta).
</MULTILINE>
Remember that <M>\theta </M> is a function of time <M>t.</M> So the above
equations actually mean 
<MULTILINE>
x(t) &  = &  L\sin(\theta(t))\\
y(t) &  = &  -L\cos(\theta(t)).
</MULTILINE>

The forces on the bob along the positive <M>x</M>- and <M>y</M>-directions
are, resepctively,
<MULTILINE>
F_x &  = &  -T\sin(\theta)\\
F_y &  = &  T\cos(\theta)-mg.
</MULTILINE>
Here <M>T</M> is the tension in the rod. It is also a function of
<M>t.</M>

<P/>

To derive the equations of motion we shall use Newton's second law of
motion, which says
<MULTILINE>
F_x &  = &  m x''\\
F_y &  = &  m y'',
</MULTILINE>
where <M>x''</M>, <M>y''</M>   denote the second derivatives of <M>x(t)</M>, <M>y(t)</M> with respect
to <M>t.</M>

<P/>

Differentiating <M>x(t)</M> and <M>y(t)</M> twice we get
<MULTILINE>
x'' &  = &  -L  \sin(\theta)(\theta')^2 + L \cos(\theta)\theta ''\\
y'' &  = &  L  \cos(\theta)(\theta')^2 + L  \sin(\theta)\theta ''.
</MULTILINE>

Putting these in Newton's second law, and simplifying, we get
<D>
\theta '' = -\frac{L}{g} \sin(\theta).
</D>
At this point most  textbooks use
the ``<M>\sin(\theta)\approx \theta </M>'' approximation for "small"
<M>\theta</M> to reduce the above differential equation to 
<D>
\theta '' = -\frac{L}{g} \theta,
</D>
which can be solved easily by hand to produce simple harmonic
motion. The approximation is pretty good if the pendulum swings
within <M>4^\circ</M>. But not all pendulums swing within that
range. What if you have a pendulum that swings <M>30^\circ?</M>
That's what we are going to explore now.
<P/>
We first reduce the second
order differential equation <M>\theta '' = -\frac{L}{g}\theta</M> 
to a <I>system</I> of first order equations.
<MULTILINE>
\theta ' &  = &  \omega\\
\omega' &  = &  -\frac{L}{g} \theta.
</MULTILINE>
Notice that <M>(\theta',\omega')</M> is given as a function
of <M>(\theta,\omega).</M> The entire motion of the pendulum is
determined if we know <M>(\theta,\omega)</M> at some instant. So
we call <M>(\theta,\omega)</M> the <I>phase</I> of the system. We
are given the initial phase of the system, i.e., we know from which initial angle we have released the
pendulum, and with what angular velocity. Our aim is to know the phase at
all time points during the swing.

<P/>
Thus, at <M>t=t_0</M> (specified number), we know 
<MULTILINE>
\theta & = & \theta_0\mbox{ (specified number)},\\
\omega & = & \omega_0\mbox{ (specified number)}.
</MULTILINE> 
We want to know the values <M>\theta(t)</M>  and <M>\omega(t)</M>  at any given <M>t > t_0.</M>
<P/>
Thanks to the differential equations, we also know 
the rate at which they are increasing at <M>t=t_0:</M>
<MULTILINE>
\theta'(t_0) & = & \omega_0,\\
\omega'(t_0) & = & -[[Lg]]\sin \theta_0.
</MULTILINE> 
Now advance time a little  to <M>t_1=t_0+\delta t</M>, say. By this
time <M>\theta</M> and <M>\omega</M> will roughly change to
<MULTILINE>
\theta_1 & = & \theta_0 + \theta'(t_0)\delta t = \theta_0+\omega_0\delta t\\
\omega_1 & = & \omega_0 +\omega'(t_0)\delta t = \omega_0-[[Lg]]\sin \theta_0.
</MULTILINE> 

So we get the phase (approximately) at  <M>t_1= t_0+\delta t.</M>
<P/>
Now we keep on advancing time by  <M>\delta t</M> increments. The same 
logic may be used repeatedly to give, at <M>t_k = t_0+k\cdot\delta t,</M>
<MULTILINE>
\theta_k & = & \theta_{k-1} + \omega_{k-1}\delta t\\
\omega_k & = & \omega_{k-1} -[[Lg]]\sin \theta_{k-1}.
</MULTILINE> 
Admittedly, this is a rather crude approximation. However, if <M>\delta t</M>  is pretty small, the accuracy increases. 
Let's explore this numerically using the following J code:
<J>
c=: _1 % 9.8 
r=: {:, (c&* @ sin @ {.)  
e=:] + (0.1&* @ r) 
plot {. |: e^:(i.100) 1 0 
</J>
Here we are making 100 steps with <M>\delta t = 0.1.</M>   Try with <M>\delta t = 0.01</M>  also, and see how the plot changes.
 <P/>
The following R code implements the same idea:
<R>
pendulum = function(t0,theta0,n,dt) {
  tm = rep(0,n)
  theta = rep(0,n);
  omega = rep(0,n);
  tm[1] = t0
  theta[1] = theta0;
  omega[1] = 0;

  
  C = -1/9.8;

  for(k in 2:n) {
    tm[k] = tm[k-1] + dt
    theta[k] = theta[k-1] + omega[k-1]*dt
    omega[k] = omega[k-1] + C*sin(theta[k-1])*dt
  }
  return(list(time=tm,angle=theta,vel=omega))
}
result1 = pendulum(0,1,1000,0.1)

plot(result1$time,result1$angle,type="l")
result2 = pendulum(0,1,10000,0.01)
lines(result2$time,result2$angle,col='red')
</R>

<EXR>
Execute the above code with different initial values, and see if
the output changes as it should. Make a plot of the velocity over
time. Draw the phasor diagram, i.e., a parametric plot
of <M>(\theta(t), \omega(t))</M> with <M>t</M> as the parameter.
</EXR>

<EXR>
Modify the code to allow the user to specify a non-zero initial velocity. 
</EXR>

<EXR>
Plot the potential energy, kinetic energy and total mechanical
energy of the system as  functions of time. Check if the total
mechanical energy curve is indeed a horizontal straight line, as
it should be.
</EXR>

<EXR>Try to produce an animation of the pendulum in R. Hint: the function 
<R>
Sys.sleep(0.1)
</R>
will cause R to wait for 0.1 second. 
</EXR>

<PROJ>
The rod in the above pendulum is an inextensible one. So we could treat
<M>L</M> as a constant. What if we replace it by a spring with constant
<M>\gamma?</M> Then the tension in the spring will be
<D>
T = \gamma\cdot (\sqrt{x^2+y^2}- \ell),
</D> 
where <M>\ell</M>  is the unstretched length of the spring. 

Numerically solve these assuming that 
<D>
\ell=4,~~x(0) = 1,~~y(0)= -2,~~x'(0)=y'(0)=0.
</D>
Animate to see if the solution looks natural. You may need to tweak <M>\delta t</M>  to make it look more natural (i.e.,
 to make it more accurate).
</PROJ>


<HEAD2>A closer look: Euler's method</HEAD2>
Our differential equation was of the form
<D>y'(t) = f(y),</D>
where <M>y(t_0) = y_0.</M> In our pendulum example we had <M>y
= (\theta,\omega).</M> Also 
<D>
f(y) \equiv f(\theta, \omega) = (*(\omega, -[[Lg]]\sin \theta)*).
</D>
The crude approximation that we used is called <B>Euler's
method</B>. It works with the more general form:
<D>
y'(t) = f(t,y),\quad y(t_0) = y_0.
</D>
We shall be given the function
<M>f(\cdot,\cdot)</M> and the initial values <M>t_0,y_0.</M> We are also  given a
positive integer <M>n</M> and a step size <M>\delta t.</M> We have to find out the
function <M>y(t)</M> at the points <M>t_1,...,t_n,</M> where
<D>
t_i = t_0+i \delta t.
</D>
Euler's method works by making local linear
approximations to the unknown <M>y(t).</M> 
<P/>
For this we need to know the derivative of <M>y(t).</M>  If
at some instant <M>t</M>  we can guess the value of <M>y(t),</M>  then the value of <M>y'(t)</M>  may be obtained from 
differential equation: <M>y'(t)=f(t,y(t)).</M>
<P/>
 Here we are starting from  <M>y_0 =
y(t_0).</M> So we know that <M>y'(t_0) = f(t_0,y_0).</M> This is the slope
of the tangent to <M>y(t)</M> at <M>t=t_0.</M> Follow this tangent for
a little time <M>\delta t</M> to arrive at <M>y_1 =
y_0+f(t_0,y_0)\delta t.</M> The point
<M>(t_1,y_1)</M> may not lie exactly on the curve of <M>y(t).</M> But if <M>\delta t</M>
is small, then this should lie close to it. So we take <M>y_1</M> as an
approximation to <M>y(t_1).</M> Now we repeat the process again to get 
<M>y_2 = y_1+\delta t\,f(t_1,y_1).</M> In general, we  define 
<D>
y_k = y_{k-1}+\delta t\, f(t_{k-1},y_{k-1}) \quad\mbox{ for } k=1,...,n.
</D>
This is <B>Euler's method</B>. 
<P/>
How good is this method? To explore this we shall try out a simple example, where
the solution is known. 

<EXM>
Suppose we are working with <M>f(t,y) = -\sin(t+y).</M> In other
words, we are solving <M>[[dy][dt]] = -\sin(t+y).</M> We shall
start from the point <M>(*(0,-[[\pi2]])*),</M> i.e., <M>y = -[[\pi2]]</M>
when <M>t=0.</M> 
<P/>
Of course,
we can solve it analytically, by taking <M>v = t+y.</M>
Then <M>[[dv][dt]]  = 1+[[dy][dt]]= 1-\sin(v),</M> which may be solved by direct integration. The
answer is (check!)
<D>
y = -\sin ^{-1} (*( [[1-t^2][1+t^2]] )*) - t.
</D>
We
shall compare our approximation with this to 
see how Euler's method performs. We shall take <M>n</M> steps
in <M>[0,2].</M> Then the Euler iterations are
<D>
y_i = y_{i-1} - [[2n]]\times \sin(t_{i-1}+y_{i-1}) 
</D>
for <M>i=1,...,n</M> starting with <M>t_0 = 0</M> and <M>y_0 =-[[\pi2]].</M>

<P/>
The result (with <M>n=10</M>) is shown in the following graph. The continuous curve is the true solution. The dashed 
polyline (with 10 segments) is Euler's approximation:
<CIMG web="eul10.png">Euler with 10 steps</CIMG>
If we increase the number of steps to 20 then the approximation
is somewhat better:
<CIMG web="eul20.png">Euler with 20 steps</CIMG>
If you use 100 steps the accuracy is pretty good:
<CIMG web="eul100.png">Euler with 100 steps</CIMG>
We may explore these using the following J code.
<J>
r1=:(1 , -@sin@+/)
e1=:] + (0.1&* @ r)
e1^:(i.5) 0 _0.5p1
</J>
</EXM>

Now try your hand at the following problem.

<EXR>
<M>[[dy][dx]] = e^{-xy^2}</M> starting from <M>(0,0).</M>
</EXR>


<HEAD2>Taylor's method</HEAD2>
One problem with Euler's method is that unless <M>\delta t</M> is very small the
<M>y_i</M>'s may move away from the curve of <M>y(t).</M> Taylor's
method generalises Euler's method to improve the accuracy. In Euler's
method we used local linear approximations (tangents)
to <M>y(t)</M> at each <M>t_i:</M>
<D>
y(t) \approx y(t_i) + y'(t_i)(t-t_i).
</D>
These are just the first two terms of the Taylor expansion
of <M>y(t):</M>
<D>
y(t_i) + y'(t_i)(t-t_i) + [[y''(t_i)][2]](t-t_i)^2
+\cdots [[y^{(k)}(t_i)][k!]] (t-t_i)^k + \cdots 
</D>
In Taylor's method we take more terms from this series. Thus,
1-st order Taylor's method is the same as Euler's method, while
the <M>k</M>-th order Taylor's method uses
<D>
y(t)\approx y(t_i) + y'(t_i)(t-t_i) + [[y''(t_i)][2]](t-t_i)^2
+\cdots [[y^{(k)}(t_i)][k!]] (t-t_i)^k.
</D>
<EXR>Check that it is the unique <M>\leq k</M> degree polynomial that has the same
derivatives as <M>y(t)</M> up to order <M>k</M>  at <M>t_i.</M></EXR>


<EXM>Solve the same differential equation
 <M>y'(t) = -\sin(t+y)</M> with <M>y(0) = -[[\pi2]]</M>
over <M>[0,2]</M>
using 2-nd order Taylor method.
<SOLN/>
The 2-nd degree Taylor polynomial for <M>y(t)</M> at
any <M>t_{k-1}</M> is 
<D>
y(t_{k-1}) + y'(t_{k-1})(t-t_{k-1}) + [[y''(t_{k-1})][2]] (t-t_{k-1})^2.
</D>
For this we need <M>y'(t_{k-1})</M>  and <M>y''(t_{k-1}).</M>  These may be obtained approximately as follows.
<P/>
We can write the differential equation as
<D>
y'(t) = -\sin(t+y(t)).
</D>
Differentiating w.r.t. <M>t,</M>
<D>
y''(t) = -\cos(t+y(t))(1+y'(t)).
</D>
Hence
<MULTILINE>
y'(t_{k-1}) & = & -\sin(t_{k-1}+y(t_{k-1}))\\
y''(t_{k-1}) & = & -\cos(t_{k-1}+y(t_{k-1}))(1+\sin(t+y(t_{k-1}))).
</MULTILINE>
<P/>
As before we take a grid of values in <M>[0,2],</M> say <M>10</M> steps. So
there are 11 points starting with <M>t_0=1</M> and ending
with <M>t_{10}=2.</M> The general formula for <M>t_k</M> is 
<D>
t_k = 1+k\cdot\delta t,
</D>
where <M>\delta t = [[2n]].</M>
<P/>
So the 2nd order Taylor iterations are
<D>y_{k} = y_{k-1} +[[2n]]y'(t_{k-1}) + [[2][n^2]]y''(t_{k-1}).</D>

The result is shown below. The red curve is the 2nd order Taylor approximation with <M>n=10.</M>  The dashed polyline is
 the Euler's approximation (i.e., 1st order Taylor) with the same <M>n.</M>
<CIMG web="et2_10.png">Euler and 2nd order Taylor
(<M>n=10</M>)</CIMG>
<J>
d1=:-@sin@+/
d2=:(-@cos@+/)*d1
tay2=:]+0.1&*@d1 + 0.005&* @ d2
tay2^:(i.5) 0 _0.5p1
</J>
</EXM>

<EXR>
Implement the code in R to produce the above plot. Also try other
values of <M>n.</M>
</EXR>


<HEAD2>Gravity well</HEAD2>
This is a more complicated example.
<P/>
Many science museums (including the Birla Industrial and
Technological Museum here in Kolkata) has a model to demonstrate
Einstein's theory of gravitation. The model consists of some
balls rolling on a
large curved plastic funnel. See
this <LINK to="https://youtu.be/dNyK3jP5gRI?t=23">Youtube video here</LINK>. The funnel
represents the space-time warped by a heavy star (yellow ball) sitting at the
center. The smaller balls tend to roll into
the cavity, but owing to their initial tangential velocities end up
orbitting the star.
<P/>

 Consider the following funnel-like
surface. It is obtained by rotating the curve <M>z = f(y)</M> around the
the <M>z</M>-axis. For instance, <M>f(y)=\sqrt{y-1}</M> would produce a
surface like the following.
<CIMG web="funnel.png">Ball in funnel</CIMG>
A ball is moving along the inner surface of the funnel. We shall ignore
the radius of the ball and the friction of the surface. (Thus the ball is a point mass slipping,
not rolling, on the funnel.) We know the
initial position and velocity of the ball. We want to find out the path
that the ball will follow. 

<P/>

There are two forces acting on the ball: its weight and the reaction of
the surface. The first works downwards, and so is 
<D>
<MAT>0\\0\\-mg</MAT>.
</D>
The reaction acts inwards along the normal to the surface at the current
position of the ball. Let the current position of the ball be 
<D>
<MAT>t\\y\\f(u)</MAT>,
</D>
where <M>u = \sqrt{t^2+y^2}.</M> A little cordinate geometry shows that
the normal lies along 
<D>
<MAT>-t\\-y\\u/f'(u)</MAT>.
</D>
So the reaction force is
<D>
R<MAT>-t\\-y\\u/f'(u)</MAT>,
</D>
for some unknown function <M>R</M> of <M>t.</M> So we have the equation of
motion:
<D>
m<MAT>x''\\y''\\z''</MAT> = R<MAT>-t\\-y\\u/f'(u)</MAT>+<MAT>0\\0\\-mg</MAT>.
</D>
Thus, we have 3 equations in 3 unknowns: <M>t,y,</M> and <M>R.</M> Notice
that <M>z</M> is a known function of <M>t</M> and <M>y.</M> To simplify
the equatiuons first find
<M>z''</M> in terms of <M>t,y</M> and their derivatives. Then eliminate
<M>R</M> to get two equations in two unknowns:
<MULTILINE>
x'' &  = &  -t\tilde R\\
y'' &  = &  -y\tilde R,\\
</MULTILINE>
where 
<D>
\tilde R = \frac{f'(u)\left(x'^2+y'^2-u'^2\right)/u+u'^2f''(u)+g}
           {u\left(f'(u)+\frac{1}{f'(u)}\right)}.
</D>
<PROJ>Use 2nd  order Taylor method to solve this for the initial condition 
<D>
t(0)=10,~~y(0)=0,~~x'(0)=0,~~y'(0)=5.
</D>
Take <M>g = 9.8.</M>
</PROJ>

<EXR>
You can make the above problem more realistic by taking friction into
account. Remember that kinetic frictional force has magnitude proportional
to the normal reaction and acts opposite to the velocity vector.
</EXR>
Many other physics examples are
discussed in the weppage <LINK to="http://www.myphysicslab.com">www.myphysicslab.com</LINK>. That page
has many interactive animations. However, they use a method more
sophisticated than what we have used. We
 shall learn that method
in the second half of this course.
<HEAD1>Comments</HEAD1>
<DISQUSE id="diff1" url="https://www.isical.ac.in/~arnabc/numana/diff1.html"/>
@}
</NOTE>
